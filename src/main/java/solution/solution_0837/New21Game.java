package solution.solution_0837;

/**
 * @author shuai.yang
 */
public class New21Game {
    /**
     * 爱丽丝参与一个大致基于纸牌游戏 “21点” 规则的游戏，描述如下：
     *
     * 爱丽丝以 0 分开始，并在她的得分少于 K 分时抽取数字。 抽取时，她从 [1, W] 的范围中随机获得一个整数作为分数进行累计，其中 W 是整数。 每次抽取都是独立的，其结果具有相同的概率。
     *
     * 当爱丽丝获得不少于 K 分时，她就停止抽取数字。 爱丽丝的分数不超过 N 的概率是多少？
     *
     * 未能彻底理解此题解
     * */
    public static void main(String[] args) {
        // 总点数限制
        int N = 21;
        // 停止抽取限制
        int K = 17;
        // 卡牌区间1~10
        int W = 10;
        System.out.println(new21Game(N, K, W));
        System.out.println(new21Game1(N, K, W));
    }

    /**
     * 动态规划
     * 因为当总分为17时就停止抽取, 那么此时如果要还能抽牌至少是16, 此时可以抽1张
     * 定义一个数组 默认出事17到21位都是1.0 百分百概率 DP:[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0]
     * 而当值为16时抽1~10之间, 小于等于21的是1~5. 即17~21  而抽到6~10因为大于21了所以不作数 . 16位的概率是其后所有的概率和/W  此时的概率是  5/10
     * DP:[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0]
     * 当值为15时
     * DP:[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.605, 0.55, 0.5, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0]
     * 其后所有的概率和/W
     * 依次计算后.
     * 第一位就是值为0时的总概率
     * */
    private static double new21Game(int N, int K, int W) {
        double[] dp = new double[K + W];
        // 此处保存K之后的概率, 即17~21之间的概率都为1
        for (int i = K; i <= N && i < K + W; i++) {
            dp[i] = 1.0;
        }
        for (int i = K - 1; i >= 0; i--) {
            for (int j = 1; j <= W; j++) {
                dp[i] += dp[i + j] / W;
            }
        }
        return dp[0];
    }

    /**
     * 根据后两个的比率取当前值的概率. 不需要每次都遍历整个W取值
     * */
    private static double new21Game1(int N, int K, int W) {
        if (K == 0) {
            return 1.0;
        }
        double[] dp = new double[K + W];
        // 此处保存K之后的概率, 即17~21之间的概率都为1
        for (int i = K; i <= N && i < K + W; i++) {
            dp[i] = 1.0;
        }
        // 17前一位的概率.
        dp[K - 1] = 1.0 * Math.min(N - K + 1, W) / W;
        for (int i = K - 2; i >= 0; i--) {
            dp[i] = dp[i + 1] - (dp[i + W + 1] - dp[i + 1]) / W;
        }
        return dp[0];
    }
}
